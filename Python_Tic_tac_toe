##Tic_tac_toe
##
##Quick run by copying and pasting into
##https://www.onlinegdb.com/online_python_compiler
import sys

#Gets value to be displayed on the gameboard to the user, 
#if the value is empty in the dictionary, the key name will be displayed
#so the user knows how to choose a space
def getValue(key): 
    return key if gameBoard.get(key) == ' ' else gameBoard.get(key) 

#Displays the current game board. The current moves made and the names
#of the spaces avaiable that can be chosen
def displayCurrentBoard():
    print() 
    print(getValue('top_l') + ' | ' + getValue('top_m') + ' | ' + getValue('top_r'))
    print('----------------')
    print(getValue('mid_l') + ' | ' + getValue('mid_m') + ' | ' + getValue('mid_r'))
    print('----------------')
    print(getValue('bot_l') + ' | ' + getValue('bot_m') + ' | ' + getValue('bot_r'))
    print()

#Checks the input of the user to make sure the move is valid.
#Will then make the move by adding the position to the appropiate
#pieces list, so that the piece list can be checked for a winning 
#set of moves.
def makeMove(piece):
    displayCurrentBoard()
    
    #check input
    print('Enter the move for \'' + piece + ('\''))
    userInput = input()
    
    while acceptedMoves.count(userInput) == 0: 
        print('Please enter a valid move for \'' + piece + ('\''))
        userInput = input()
    
    #make move
    userMove = acceptedMoves.pop(acceptedMoves.index(userInput))
    gameBoard[userMove] = piece

    if piece == 'X':
        xMoves.append(userMove)
        checkWin(xMoves, piece)
    else:
        oMoves.append(userMove)
        checkWin(oMoves, piece)

#Checks to see if a piece has won 
#The currentMoves of a piece are held in a list, this method checks whether
#That list holds a wining set of moves
def checkWin(currentMoves, piece): 
    winList = []
    winList.append(['top_l', 'mid_l', 'bot_l']) #leftWin
    winList.append(['top_m', 'mid_m', 'bot_m']) #middle verticle win 
    winList.append(['top_r', 'mid_r', 'bot_r']) #rightWin
    winList.append(['top_l', 'top_m', 'top_r'])#top win
    winList.append(['mid_l', 'mid_m', 'mid_r'])#middle horizontal win
    winList.append(['bot_l', 'bot_m', 'bot_r'])#bottom win 
    winList.append(['bot_l', 'mid_m', 'top_r']) #ascending diagional win
    winList.append(['top_l', 'mid_m', 'bot_r']) #descending diagional win
    
    if (len(currentMoves) > 2):
        for winOption in winList:
            if(all(elem in currentMoves for elem in winOption)):
                displayCurrentBoard()
                print(piece + ' has won. Goodbye')
                sys.exit(0)

#This is the main() of the program. 
#It displays the welcome screen and runs each turn
gameBoard = {'top_l': ' ', 'top_m': ' ', 'top_r': ' ',
    'mid_l': ' ', 'mid_m': ' ', 'mid_r': ' ',
    'bot_l': ' ', 'bot_m':' ', 'bot_r': ' '}
acceptedMoves = list(gameBoard.keys())
acceptedMoves.sort()
xMoves = []
oMoves = []
currentBoard = []
totMoveCnt = 0 

print('Welcome, Welcome, This is Tic-Tac-Toe')
print('Please type in the names as you see them on the board')
print('The available moves are: ')

while totMoveCnt <=9: 
    makeMove('X') if totMoveCnt % 2 == 0 else makeMove('O')
    totMoveCnt += 1
